#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('queue-no2:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/*
 * SOCKET IO CONNECTION
 */

const io = require('socket.io')(server);
const formatMessage = require('../utils/messages');
const users = require('../utils/users');
const rooms = require('../utils/rooms');
const botName = '';
var firstDostop = 0;
var activeFirstGroup = 1;
var activeSecondGroup = 1;
var activeThirdGroup = 1;
var timerCheck =0;

io.on('connection', socket => {
  firstDostop++;
  
  socket.on('joinRoom', ({ roomID, username1, username2 }) => {
    if(roomID && username1 && username2){
      rooms.createRoom(roomID.toString(), username1, username2);

      socket.join(roomID.toString());

      // Display messages that were sent before opened chat
      
        var allMessagesInTheRoom = rooms.getAllMessagesInRoom(roomID.toString());
        socket.emit('allMessagesInRoom', allMessagesInTheRoom);
      
      

      // Now chatting message
      socket.emit('message', formatMessage(botName, 'Now chatting with visitor '+ username2.toString()));
    }
  });

  // New client accessed the page
  var cookiesFromHeader = socket.handshake.headers['cookie'];
  var clientID = getCookieValue("cookieName",cookiesFromHeader);
  console.log(clientID);
  
  users.createClient(clientID);

  var clientsQnum = users.getClientsQueueNumber(clientID);
  if(activeFirstGroup == 0) socket.emit('unactive_group', {clientsQnum: clientsQnum,grNum: '541'});
  if(activeSecondGroup == 0) socket.emit('unactive_group', {clientsQnum: clientsQnum,grNum: '356'});
  if(activeThirdGroup == 0) socket.emit('unactive_group', {clientsQnum: clientsQnum, grNum: '987'});
  

  socket.on('check_if_group_active', (grIx) => {
    var isActive = users.checkIfGroupActive(grIx);
    socket.emit('if_group_active', {numberIX: grIx, isActive: isActive, clientsNumber: clientsQnum});
  });
  // First connection on webpage
  socket.emit('first_connection', formatMessage(users.getClientsQueueNumber(clientID), 'Your queue number'));

  // Send list of all groups
  socket.emit('all_groups', users.getAllGroups());

  // Send list of users in this group
  socket.on('get_users_in_group', ({ groupID }) => {
    socket.emit('users_in_group', users.getUsersInGroup(groupID));
  });

  socket.on('get_user', ({username}) => {
    socket.emit('user', users.getCurrentUser(clientID));
  });
  socket.on('get_user_by_username', ({username2}) => {
    socket.emit('user_by_username', users.getClientWithUsername(username2));
  });

  // Send list of chat peers
  socket.emit('ChatPeers', users.getCurrentUser(clientID).chatPeers);

  // Listen for chat message 
  socket.on('chatMessage', ({roomID, msg, username1, username2}) => {
    const user = users.getCurrentUser(clientID);

    // Store message 
    rooms.pushNewMessage(roomID.toString(), formatMessage(user.username, msg));

    // Mark opened chat for both users
    users.markOpenedChatForUser(username1, username2);
    users.markOpenedChatForUser(username2, username1);

    io.to(roomID.toString()).emit('message', formatMessage(user.username, msg));
  });

  // When trade button is clicked
  socket.on('tradeNumber', ({ roomID, username1, username2 }) => {
    socket
    .to(roomID.toString())
    .emit ('confirmTradeProcess', { roomID, username1, username2 });
  });

  // When user 2 confirms trade process
  socket.on('approvedTrade', ({ roomID, username1, username2 }) => {
    if(users.switchQueueNumbers(clientID, username1, username2) == 1){
      
      console.log("ta if stavek")
      rooms.wipeChatLogs(roomID.toString());
      console.log("chatroom deleted")
      users.wipeChatPeers(username1, username2);
      console.log("chatpeers deleted")
      socket
      .to(roomID.toString())
      .emit ('approvedTradeToUser', { roomID, username1, username2 });
    }
    else {
      socket.on('disapprovedTrade', ({ roomID, username1, username2 }) => {
        socket
        .to(roomID.toString())
        .emit ('disapprovedTradeToUser', { roomID, username1, username2 });
      });
    }
  });

  // When user 2 rejects trade process
  socket.on('disapprovedTrade', ({ roomID, username1, username2 }) => {
    socket
    .to(roomID.toString())
    .emit ('disapprovedTradeToUser', { roomID, username1, username2 });
  });

  socket.on('getMeMyQueueNumber', ({usernameEl}) => {
    console.log("getMeMyQueueNumber");
    socket.emit('first_connection', formatMessage(users.getClientsQueueNumber(clientID), 'Your queue number'));
  });

  socket.on('deleteUsersDatabase', ({}) => {
    users.deleteAllUsers();
    rooms.deleteAllRooms();
    socket.emit('deletedDatabase', "You deleted users and rooms. Fresh restart.");
  });
  socket.on('setTimer', (message) =>{
    console.log("countdown started" + message)
    timerCheck = timerCheck+ 1;
    console.log(timerCheck);

    if(timerCheck >= 1){
      console.log("zacni cettimeoute");
      setTimeout(function(){ 
        //emit('unactive_group', '541');
        activeFirstGroup=0;
        users.wipeGroup('0');
        console.log("deleted group 541")}, 1800000);
      setTimeout(function(){ 
        //socket.emit('unactive_group', '356');
        activeSecondGroup=0;
        users.wipeGroup('1');
        console.log("deleted group 356");
      }, 1800000 * 2);
      setTimeout(function(){ 
        //socket.emit('unactive_group', '987');
        activeThirdGroup=0;
        users.wipeGroup('2');
        console.log("deleted group 987");
  
      }, 1800000 * 3);
    } 
  });
  socket.on('disconnect', function () {
    io.sockets.emit('user disconnected');
  });
});





function getCookieValue(a, cookie) {
  if(cookie){
  var b = cookie.match('(^|;)\\s*' + a + '\\s*=\\s*([^;]+)');
  return b ? b.pop() : '';
  }
  else 0
}