
<script src = "/javascripts/two.js"></script>

<div class="justify-content-center" style="text-align: center;">
    <div id = "yourNumberIs">
        <h1 id = "yourNumberIsh1" style = "margin-bottom:5px;">People inside:</h1>
    </div>
    <div id = "draw-shapes" style="text-align:center;"></div>

    <canvas id="myCanvas" width="350" height="500"></canvas>

    <script type="text/javascript">
       // Make an instance of two and place it on the page.
        /*var elem = document.getElementById('draw-shapes');
        var screenWidth = screen.width * 0.7;
        var screenHeight = screen.height * 0.5;

        var params = { width: screenWidth, height: screenHeight };
        var two = new Two(params).appendTo(elem);
        
        two.load('/images/floorplan.svg', function (svg) {
            // svg is a Two.Group that has all the children
            svg.center(); // I center the object's shapes
            if (screenWidth < 300) {
                svg.scale = 1.3;
            }
            else {
                svg.scale = 2;
            }
            svg.translation.set(two.width / 2, two.height / 2); // move to the center of the canvas
            var text = new Two.Text("entrance", svg.children[1].translation.x, svg.children[1].translation.y);
            svg.add(text);
            var numq = new Two.Text("253", two.width / 2, two.height / 2);

            var svgVertices = svg.children[0].vertices;
            var svgBoundingBox = svg.getBoundingClientRect();
            console.log(svgBoundingBox)
            var bottom = svgBoundingBox.bottom /2;
            var left = svgBoundingBox.left + 3*svgBoundingBox.left/5;
            var right = svgBoundingBox.right - 20;
            var top = svgBoundingBox.top+ 10;
            var rect = two.makeRectangle(two.width / 2, two.height / 2, svgBoundingBox.width, svgBoundingBox.height);
            console.log("bottom: " + bottom + "left: " + left + "right " + right + ", top: " + top);
            var randomX = getRandomArbitrary(left, right);
            var randomY = getRandomArbitrary(top, bottom);
            console.log("randomX: " + randomX + "randomY: " + randomY);
            var ranNum = new Two.Text("444", randomX, randomY);
            two.add(ranNum);
            /*two.bind('update', function(frameCount) {
                var r2 = numq.getBoundingClientRect();
                // This code is called everytime two.update() is called.
                // Effectively 60 times per second.

                two.add(numq);
            }).play();*/
       //     two.add(svg);
      //     two.update();
       // });
        (function(){

function init(){
     var canvas = document.getElementsByTagName('canvas')[0];
     var c = canvas.getContext('2d');

     var container = {x:0,y:0,width:350,height:500};
     var circles = [{x:300,y:200,r:3,color:0,vx:0.2,vy:0.2},
                    {x:300,y:200,r:3,color:0,vx:-0.2,vy:0.2},
                    {x:200,y:145,r:3,color:0,vx:0.2,vy:-0.2},
                    {x:60,y:100,r:3,color:0,vx:0.2,vy:-0.2},
                    {x:100,y:50,r:3,color:0,vx:-0.2,vy:-0.2},


                    
                    {x:400,y:350,r:3,color:0,vx:-0.2,vy:-0.2},
                    {x:410,y:350,r:3,color:0,vx:-0.2,vy:-0.2}
     ];
     var circles_outside = [                    
                    {x:280,y:320,r:3,color:0,vx:-0.2,vy:0.2},
                    {x:300,y:310,r:3,color:0,vx:0.2,vy:-0.2},
                    {x:310,y:310,r:3,color:0,vx:0.2,vy:0.2}
     ];
     var outsideArea = {x:250,y:290,width:100,height:100};

     var plan = [{x:2,y:2},
     {x:348,y:2}, {x:348,y:250}, {x:250,y:250}, {x:250,y:185},
     {x:182,y:185}, {x:182,y:308}, {x:110,y:308}, {x:110,y:270},
     {x:15,y:270}, {x:15,y:161}, {x:48,y:161}, {x:48,y:67},
     {x:2,y:67}, {x:2,y:2}
     ]
     var left1 = plan[12].x;
     var left2 = plan[12].y;
     var left3 = plan[11].y;
     var left4 = plan[10].x;
     var left5 = plan[9].y;
     
     var bottom1 = plan[8].x;
     var bottom2 = plan[5].x;
     var bottom3 = plan[4].y;
     var bottom4 = plan[4].x;
     var bottom5 = plan[3].y;


     function draw(){
         c.fillStyle = 'white';
         //c.strokeStyle = 'white';
         //c.fillRect(container.x,container.y,container.width,container.height);
         c.clearRect(container.x,container.y,container.width,container.height);
         //c.strokeRect(container.x,container.y,container.width,container.height);

         for(var i=0; i <circles.length; i++){
             c.fillStyle = 'hsl(' + circles[i].color + ',0%,0%)';
             c.beginPath();
             c.arc(circles[i].x,circles[i].y,circles[i].r,0,2*Math.PI,false);
             c.fill();

            /** Uper border **/
            //bottom limit %% top limit
             if((circles[i].y + circles[i].vy + circles[i].r > plan[6].y) || (circles[i].y - circles[i].r + circles[i].vy < container.y)){
                circles[i].vy = - circles[i].vy;
             }
             //right limit && left limit
             if((circles[i].x + circles[i].vx + circles[i].r > container.x + container.width) || (circles[i].x - circles[i].r + circles[i].vx < container.x)){
                circles[i].vx = - circles[i].vx;
             }
             /**Left border 1**/
             if(circles[i].x - circles[i].r + circles[i].vx < left1){
                 if((circles[i].y + circles[i].vy + circles[i].r < left3) && (circles[i].y - circles[i].r + circles[i].vy > left2)){
                     circles[i].vx = - circles[i].vx;
                 }
             }
             /**Left border 2**/
             if(circles[i].x - circles[i].r + circles[i].vx < left4){
                 if((circles[i].y + circles[i].vy + circles[i].r > left3) && (circles[i].y - circles[i].r + circles[i].vy < left5)){
                     circles[i].vx = - circles[i].vx;
                 }
             }
             /**Left border 3 horizontal**/
             if(circles[i].y < left2 && circles[i].x < left1){
                if(circles[i].y + circles[i].vy + circles[i].r > left2){
                    circles[i].vy = - circles[i].vy;
                }
             }
             /**Left border 4 horizontal**/
             if(circles[i].y < left5 && circles[i].y > left3 && circles[i].x < left1){
                if(circles[i].y - circles[i].r + circles[i].vy < left3){
                    circles[i].vy = - circles[i].vy;
                }
             }

             /** Bottom border horizontal**/
             if(circles[i].y < left5 && circles[i].y > left3 && circles[i].x < bottom1){
                if(circles[i].y + circles[i].vy + circles[i].r > left5){
                    circles[i].vy = - circles[i].vy;
                }
             }
              /** Bottom border 1 vertical**/
             if(circles[i].x > bottom1 && circles[i].y > left5){
                 if(circles[i].x - circles[i].r + circles[i].vx < bottom1){
                    circles[i].vx = - circles[i].vx;
                }
             }
              /** Bottom border 2 vertical**/
             if(circles[i].x < bottom2 && circles[i].y > bottom3){
                 if(circles[i].x + circles[i].vx + circles[i].r > bottom2){
                    circles[i].vx = - circles[i].vx;
                }
             }
              /** Bottom border 3 horizontal**/
             if(circles[i].x > bottom2 && circles[i].x < bottom4 && circles[i].y < bottom3){
                if(circles[i].y + circles[i].vy + circles[i].r > bottom3){
                    circles[i].vy = - circles[i].vy;
                }
             }
              /** Bottom border 4 vertical**/
             if(circles[i].x > bottom4 && circles[i].y > bottom3){
                if(circles[i].x - circles[i].r + circles[i].vx < bottom4){
                    circles[i].vx = - circles[i].vx;
                }
             }
              /** Bottom border 5 horizontal**/
             if(circles[i].x > bottom4 && circles[i].y > bottom3){
                if(circles[i].y + circles[i].vy + circles[i].r >bottom5){
                    circles[i].vy = - circles[i].vy;
                }
             }

            circles[i].x +=circles[i].vx;
             circles[i].y +=circles[i].vy;
         }
        for(var i=0; i <circles_outside.length; i++){
            c.fillStyle = 'hsl(' + circles_outside[i].color + ',0%,0%)';
             c.beginPath();
             c.arc(circles_outside[i].x,circles_outside[i].y,circles_outside[i].r,0,2*Math.PI,false);
             c.fill();
            /*********OUTSIDE ***********/
            if((circles_outside[i].x + circles_outside[i].vx + circles_outside[i].r > outsideArea.x + outsideArea.width) || (circles_outside[i].x - circles_outside[i].r + circles_outside[i].vx < outsideArea.x)){
                circles_outside[i].vx = - circles_outside[i].vx;
             }
             if((circles_outside[i].y + circles_outside[i].vy + circles_outside[i].r > outsideArea.y + outsideArea.height) || (circles_outside[i].y - circles_outside[i].r + circles_outside[i].vy < outsideArea.y)){
                 circles_outside[i].vy = - circles_outside[i].vy;
             }
             // Circles outside
            circles_outside[i].x +=circles_outside[i].vx;
            circles_outside[i].y +=circles_outside[i].vy;
        }
         
            /*Draw plan */ 
        c.fillStyle = 'white';
        c.lineWidth = "1";
        c.strokeStyle = 'black';
        c.beginPath();
        c.moveTo(plan[0].x, plan[0].y);
        for (var j=1; j < plan.length; j++){
            c.lineTo(plan[j].x, plan[j].y);
            c.stroke();
        }
        c.font = "15px Arial";
        c.fillStyle = "black";
        c.textAlign = "center";
        c.fillText("Enterance", 150, 340);

                requestAnimationFrame(draw);

            }


            requestAnimationFrame(draw);


        }

        //invoke function init once document is fully loaded
        window.addEventListener('load',init,false);

        }());  //self invoking function

        function getRandomArbitrary(min, max) {
            return Math.random() * (max - min) + min;
        }
    </script>
</div>

<nav class="navbar navbar-expand fixed-bottom custom-navbar-style mb-4">
    <div class="navbar-collapse collapse justify-content-center">
        <ul class="nav pt-1 justify-content-between">
            <li class="nav-item">
                <a class="nav-link" href="/trade">Trade<br> number</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/complaint">Complain<br> about it</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/control">Control<br> visitors</a>
            </li>
        </ul>
    </div>
</nav>
